import math
class LaplaceUnigramLanguageModel:

  def __init__(self, corpus):
    """Initialize your data structures in the constructor."""
    # TODO your code here
    self.unigram = dict()
    self.N = 0.0
    self.V = 0.0
    self.train(corpus)
    

  def train(self, corpus):
    """ Takes a corpus and trains your language model. 
        Compute any counts or other corpus statistics in this function.
    """  
    # TODO your code here
    #print type(corpus)
    #print 'trainginggggggggggg'
    for sentence in corpus.corpus:
      #words = line.split(' ') #split based on white space
      #print line.data
      for data in sentence.data:
        word = data.word
        self.unigram[word] = self.unigram.get(word,0) + 1
        #print word, self.unigram[word]
    self.V = len(self.unigram) #vocabulary of v
    self.N = sum(self.unigram.values()) #total number of unigrams
    #print 'tokens ',self.V, self.N
    

  def score(self, sentence):
    """ Takes a list of strings as argument and returns the log-probability of the 
        sentence using your language model. Use whatever data you computed in train() here.
    """
    #print 'scoringgggggg'
    # TODO your code here
    # <s> and </s> are already part of the corpus
    result = 0.0
    #self.V = len(self.unigram) #vocabulary of v
    #self.N = sum(self.unigram.values()) #total number of unigrams
    #print 'here ',self.N, self.V
    #print sentence
    for word in sentence:
      #word = data.word
      prob = float((self.unigram.get(word,0)+1))/(self.N+self.V) #convert to float!!
      #print word, prob
      result += math.log(prob)
      #print word , prob
    #print sentence, result
    return result
